syntax = "proto3";

package protocol;

// The greeting service definition.
service Haraqa {
  // Sends a message to create a new topic
  rpc CreateTopic (CreateTopicRequest) returns (CreateTopicResponse) {}
  // Sends a message to delete a topic
  rpc DeleteTopic (DeleteTopicRequest) returns (DeleteTopicResponse) {}
  // Sends a message to truncate a topic to a specific point
  rpc TruncateTopic (TruncateTopicRequest) returns (TruncateTopicResponse) {}
  // Sends a message to list all topics
  rpc ListTopics (ListTopicsRequest) returns (ListTopicsResponse) {}
  // Sends a produce message
  rpc Produce (ProduceRequest) returns (ProduceResponse) {}
  // Sends a consume message
  rpc Consume (ConsumeRequest) returns (ConsumeResponse) {}
}

message Meta {
  bool OK = 1;
  string error_msg = 2;
}

message CreateTopicRequest {
  bytes topic = 1;
}

message CreateTopicResponse {
  Meta meta = 1;
}

message DeleteTopicRequest {
  bytes topic = 1;
}

message DeleteTopicResponse {
  Meta meta = 1;
}

message TruncateTopicRequest {
  bytes topic = 1;
  int64 offset = 2;
}

message TruncateTopicResponse {
  Meta meta = 1;
}

message ListTopicsRequest {
}

message ListTopicsResponse {
  Meta meta = 1;
  repeated bytes topics = 2;
}

// The request message containing the produce batch
message ProduceRequest {
  bytes topic = 1;
  bytes uuid = 2;
  repeated int64 msg_sizes = 3;
}

// The response message containing the produce ack
message ProduceResponse {
  Meta meta = 1;
}

// The request message containing the consume batch
message ConsumeRequest {
  bytes topic = 1;
  bytes uuid = 2;
  int64 offset = 3;
  int64 maxBatchSize = 4;
}

// The response message containing the consume ack
message ConsumeResponse {
  Meta meta = 1;
  repeated int64 msg_sizes = 2;
}
