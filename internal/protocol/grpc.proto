syntax = "proto3";

package protocol;

// The greeting service definition.
service Haraqa {
  // CreateTopic sends a message to create a new topic
  rpc CreateTopic (CreateTopicRequest) returns (CreateTopicResponse) {}
  // DeleteTopic sends a message to delete a topic
  rpc DeleteTopic (DeleteTopicRequest) returns (DeleteTopicResponse) {}
  // TruncateTopic sends a message to truncate a topic to a specific point
  rpc TruncateTopic (TruncateTopicRequest) returns (TruncateTopicResponse) {}
  // ListTopics sends a message to list all topics
  rpc ListTopics (ListTopicsRequest) returns (ListTopicsResponse) {}
  // Offsets sends a message to get a topics beginning and ending offsets
  rpc Offsets (OffsetRequest) returns (OffsetResponse) {}
  // WatchTopics streams requests for watching one or more topics, returns updated offsets
  rpc WatchTopics(stream WatchRequest) returns (stream WatchResponse) {}
  // Lock locks a consumer group, waits for an unlock
  rpc Lock(stream LockRequest) returns (stream LockResponse) {}
  // Produce produces a batch of messages to a topic
  rpc Produce(GRPCProduceRequest) returns (GRPCProduceResponse) {}
  // Consume consumes a batch of messages from a topic
  rpc Consume(GRPCConsumeRequest) returns (GRPCConsumeResponse) {}
}

message Meta {
  bool OK = 1;
  string error_msg = 2;
}

message CreateTopicRequest {
  bytes topic = 1;
}

message CreateTopicResponse {
  Meta meta = 1;
}

message DeleteTopicRequest {
  bytes topic = 1;
}

message DeleteTopicResponse {
  Meta meta = 1;
}

message TruncateTopicRequest {
  bytes topic = 1;
  int64 offset = 2;
}

message TruncateTopicResponse {
  Meta meta = 1;
}

message ListTopicsRequest {
  string prefix = 1;
  string suffix = 2;
  string regex = 3;
}

message ListTopicsResponse {
  Meta meta = 1;
  repeated bytes topics = 2;
}

// The request message containing the offset info
message OffsetRequest {
  bytes topic = 1;
}

// The response message containing the offset response
message OffsetResponse {
  Meta meta = 1;
  int64 min_offset = 2;
  int64 max_offset = 3;
}

message WatchRequest {
  repeated bytes topics = 1;
  bool term = 2;
}

message WatchResponse {
  Meta meta = 1;
  bytes topic = 2;
  int64 min_offset = 3;
  int64 max_offset = 4;
}

message LockRequest {
  bytes group = 1;
  int64 time = 2;
  bool lock = 3;
}

message LockResponse {
  Meta meta = 1;
  bool locked = 2;
}

message GRPCProduceRequest {
  bytes topic = 1;
  repeated int64 msg_sizes = 2;
  bytes messages = 3;
}

message GRPCProduceResponse {
  Meta meta = 1;
}

message GRPCConsumeRequest {
  bytes topic = 1;
  int64 offset = 2;
  int64 limit = 3;
}

message GRPCConsumeResponse {
  Meta meta = 1;
  repeated int64 msg_sizes = 2;
  bytes messages = 3;
}
