// Code generated by MockGen. DO NOT EDIT.
// Source: queue.go

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	io "io"
	reflect "reflect"
	time "time"
)

// MockQueue is a mock of Queue interface
type MockQueue struct {
	ctrl     *gomock.Controller
	recorder *MockQueueMockRecorder
}

// MockQueueMockRecorder is the mock recorder for MockQueue
type MockQueueMockRecorder struct {
	mock *MockQueue
}

// NewMockQueue creates a new mock instance
func NewMockQueue(ctrl *gomock.Controller) *MockQueue {
	mock := &MockQueue{ctrl: ctrl}
	mock.recorder = &MockQueueMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockQueue) EXPECT() *MockQueueMockRecorder {
	return m.recorder
}

// CreateTopic mocks base method
func (m *MockQueue) CreateTopic(topic []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTopic", topic)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateTopic indicates an expected call of CreateTopic
func (mr *MockQueueMockRecorder) CreateTopic(topic interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTopic", reflect.TypeOf((*MockQueue)(nil).CreateTopic), topic)
}

// DeleteTopic mocks base method
func (m *MockQueue) DeleteTopic(topic []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTopic", topic)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTopic indicates an expected call of DeleteTopic
func (mr *MockQueueMockRecorder) DeleteTopic(topic interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTopic", reflect.TypeOf((*MockQueue)(nil).DeleteTopic), topic)
}

// TruncateTopic mocks base method
func (m *MockQueue) TruncateTopic(topic []byte, offset int64, before time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TruncateTopic", topic, offset, before)
	ret0, _ := ret[0].(error)
	return ret0
}

// TruncateTopic indicates an expected call of TruncateTopic
func (mr *MockQueueMockRecorder) TruncateTopic(topic, offset, before interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TruncateTopic", reflect.TypeOf((*MockQueue)(nil).TruncateTopic), topic, offset, before)
}

// ListTopics mocks base method
func (m *MockQueue) ListTopics(prefix, suffix, regex string) ([][]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTopics", prefix, suffix, regex)
	ret0, _ := ret[0].([][]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTopics indicates an expected call of ListTopics
func (mr *MockQueueMockRecorder) ListTopics(prefix, suffix, regex interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTopics", reflect.TypeOf((*MockQueue)(nil).ListTopics), prefix, suffix, regex)
}

// Produce mocks base method
func (m *MockQueue) Produce(tcpConn io.Reader, topic []byte, msgSizes []int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Produce", tcpConn, topic, msgSizes)
	ret0, _ := ret[0].(error)
	return ret0
}

// Produce indicates an expected call of Produce
func (mr *MockQueueMockRecorder) Produce(tcpConn, topic, msgSizes interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Produce", reflect.TypeOf((*MockQueue)(nil).Produce), tcpConn, topic, msgSizes)
}

// ConsumeInfo mocks base method
func (m *MockQueue) ConsumeInfo(topic []byte, offset, limit int64) ([]byte, int64, []int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConsumeInfo", topic, offset, limit)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].([]int64)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// ConsumeInfo indicates an expected call of ConsumeInfo
func (mr *MockQueueMockRecorder) ConsumeInfo(topic, offset, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConsumeInfo", reflect.TypeOf((*MockQueue)(nil).ConsumeInfo), topic, offset, limit)
}

// Consume mocks base method
func (m *MockQueue) Consume(tcpConn io.Writer, topic, filename []byte, startAt, totalSize int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Consume", tcpConn, topic, filename, startAt, totalSize)
	ret0, _ := ret[0].(error)
	return ret0
}

// Consume indicates an expected call of Consume
func (mr *MockQueueMockRecorder) Consume(tcpConn, topic, filename, startAt, totalSize interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Consume", reflect.TypeOf((*MockQueue)(nil).Consume), tcpConn, topic, filename, startAt, totalSize)
}

// Offsets mocks base method
func (m *MockQueue) Offsets(topic []byte) (int64, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Offsets", topic)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Offsets indicates an expected call of Offsets
func (mr *MockQueueMockRecorder) Offsets(topic interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Offsets", reflect.TypeOf((*MockQueue)(nil).Offsets), topic)
}
