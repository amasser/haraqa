// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/haraqa/haraqa/internal/protocol (interfaces: Haraqa_LockServer,Haraqa_WatchTopicsServer)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	protocol "github.com/haraqa/haraqa/internal/protocol"
	metadata "google.golang.org/grpc/metadata"
	reflect "reflect"
)

// MockHaraqa_LockServer is a mock of Haraqa_LockServer interface
type MockHaraqa_LockServer struct {
	ctrl     *gomock.Controller
	recorder *MockHaraqa_LockServerMockRecorder
}

// MockHaraqa_LockServerMockRecorder is the mock recorder for MockHaraqa_LockServer
type MockHaraqa_LockServerMockRecorder struct {
	mock *MockHaraqa_LockServer
}

// NewMockHaraqa_LockServer creates a new mock instance
func NewMockHaraqa_LockServer(ctrl *gomock.Controller) *MockHaraqa_LockServer {
	mock := &MockHaraqa_LockServer{ctrl: ctrl}
	mock.recorder = &MockHaraqa_LockServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockHaraqa_LockServer) EXPECT() *MockHaraqa_LockServerMockRecorder {
	return m.recorder
}

// Context mocks base method
func (m *MockHaraqa_LockServer) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context
func (mr *MockHaraqa_LockServerMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockHaraqa_LockServer)(nil).Context))
}

// Recv mocks base method
func (m *MockHaraqa_LockServer) Recv() (*protocol.LockRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*protocol.LockRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv
func (mr *MockHaraqa_LockServerMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockHaraqa_LockServer)(nil).Recv))
}

// RecvMsg mocks base method
func (m *MockHaraqa_LockServer) RecvMsg(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecvMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg
func (mr *MockHaraqa_LockServerMockRecorder) RecvMsg(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockHaraqa_LockServer)(nil).RecvMsg), arg0)
}

// Send mocks base method
func (m *MockHaraqa_LockServer) Send(arg0 *protocol.LockResponse) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send
func (mr *MockHaraqa_LockServerMockRecorder) Send(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockHaraqa_LockServer)(nil).Send), arg0)
}

// SendHeader mocks base method
func (m *MockHaraqa_LockServer) SendHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendHeader indicates an expected call of SendHeader
func (mr *MockHaraqa_LockServerMockRecorder) SendHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHeader", reflect.TypeOf((*MockHaraqa_LockServer)(nil).SendHeader), arg0)
}

// SendMsg mocks base method
func (m *MockHaraqa_LockServer) SendMsg(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg
func (mr *MockHaraqa_LockServerMockRecorder) SendMsg(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockHaraqa_LockServer)(nil).SendMsg), arg0)
}

// SetHeader mocks base method
func (m *MockHaraqa_LockServer) SetHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHeader indicates an expected call of SetHeader
func (mr *MockHaraqa_LockServerMockRecorder) SetHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeader", reflect.TypeOf((*MockHaraqa_LockServer)(nil).SetHeader), arg0)
}

// SetTrailer mocks base method
func (m *MockHaraqa_LockServer) SetTrailer(arg0 metadata.MD) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTrailer", arg0)
}

// SetTrailer indicates an expected call of SetTrailer
func (mr *MockHaraqa_LockServerMockRecorder) SetTrailer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTrailer", reflect.TypeOf((*MockHaraqa_LockServer)(nil).SetTrailer), arg0)
}

// MockHaraqa_WatchTopicsServer is a mock of Haraqa_WatchTopicsServer interface
type MockHaraqa_WatchTopicsServer struct {
	ctrl     *gomock.Controller
	recorder *MockHaraqa_WatchTopicsServerMockRecorder
}

// MockHaraqa_WatchTopicsServerMockRecorder is the mock recorder for MockHaraqa_WatchTopicsServer
type MockHaraqa_WatchTopicsServerMockRecorder struct {
	mock *MockHaraqa_WatchTopicsServer
}

// NewMockHaraqa_WatchTopicsServer creates a new mock instance
func NewMockHaraqa_WatchTopicsServer(ctrl *gomock.Controller) *MockHaraqa_WatchTopicsServer {
	mock := &MockHaraqa_WatchTopicsServer{ctrl: ctrl}
	mock.recorder = &MockHaraqa_WatchTopicsServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockHaraqa_WatchTopicsServer) EXPECT() *MockHaraqa_WatchTopicsServerMockRecorder {
	return m.recorder
}

// Context mocks base method
func (m *MockHaraqa_WatchTopicsServer) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context
func (mr *MockHaraqa_WatchTopicsServerMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockHaraqa_WatchTopicsServer)(nil).Context))
}

// Recv mocks base method
func (m *MockHaraqa_WatchTopicsServer) Recv() (*protocol.WatchRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*protocol.WatchRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv
func (mr *MockHaraqa_WatchTopicsServerMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockHaraqa_WatchTopicsServer)(nil).Recv))
}

// RecvMsg mocks base method
func (m *MockHaraqa_WatchTopicsServer) RecvMsg(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecvMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg
func (mr *MockHaraqa_WatchTopicsServerMockRecorder) RecvMsg(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockHaraqa_WatchTopicsServer)(nil).RecvMsg), arg0)
}

// Send mocks base method
func (m *MockHaraqa_WatchTopicsServer) Send(arg0 *protocol.WatchResponse) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send
func (mr *MockHaraqa_WatchTopicsServerMockRecorder) Send(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockHaraqa_WatchTopicsServer)(nil).Send), arg0)
}

// SendHeader mocks base method
func (m *MockHaraqa_WatchTopicsServer) SendHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendHeader indicates an expected call of SendHeader
func (mr *MockHaraqa_WatchTopicsServerMockRecorder) SendHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHeader", reflect.TypeOf((*MockHaraqa_WatchTopicsServer)(nil).SendHeader), arg0)
}

// SendMsg mocks base method
func (m *MockHaraqa_WatchTopicsServer) SendMsg(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg
func (mr *MockHaraqa_WatchTopicsServerMockRecorder) SendMsg(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockHaraqa_WatchTopicsServer)(nil).SendMsg), arg0)
}

// SetHeader mocks base method
func (m *MockHaraqa_WatchTopicsServer) SetHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHeader indicates an expected call of SetHeader
func (mr *MockHaraqa_WatchTopicsServerMockRecorder) SetHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeader", reflect.TypeOf((*MockHaraqa_WatchTopicsServer)(nil).SetHeader), arg0)
}

// SetTrailer mocks base method
func (m *MockHaraqa_WatchTopicsServer) SetTrailer(arg0 metadata.MD) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTrailer", arg0)
}

// SetTrailer indicates an expected call of SetTrailer
func (mr *MockHaraqa_WatchTopicsServerMockRecorder) SetTrailer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTrailer", reflect.TypeOf((*MockHaraqa_WatchTopicsServer)(nil).SetTrailer), arg0)
}
